import React, { useState, useEffect, useRef } from 'react';

// --- Data for Programs (Comprehensive Sample) ---
// This is a curated selection and categorization based on your PDF.
// For a full 140 programs, a robust parsing and data extraction
// would typically be performed from the PDF on a backend or build step.
const programsData = [
  // Basic Operations & Math
  { id: 1, category: "Basic Operations & Math", title: "Program 1: Print 'Hello Python'", description: "This program demonstrates how to print a simple string to the console.", code: `print("Hello Python")` },
  { id: 2, category: "Basic Operations & Math", title: "Program 2: Arithmetic Operations", description: "Basic addition and division with user input.", code: `# Addition\nnum1 = float(input("Enter first number: "))\nnum2 = float(input("Enter second number: "))\nprint(f"Sum: {num1} + {num2} = {num1 + num2}")\n\n# Division\nnum3 = float(input("Enter dividend: "))\nnum4 = float(input("Enter divisor: "))\nif num4 == 0:\n    print("Error: Division by zero is not allowed.")\nelse:\n    print(f"Division: {num3} / {num4} = {num3 / num4}")` },
  { id: 3, category: "Basic Operations & Math", title: "Program 3: Area of a Triangle", description: "Calculates the area of a triangle given base and height.", code: `base = float(input("Enter base: "))\nheight = float(input("Enter height: "))\narea = 0.5 * base * height\nprint(f"Area: {area}")` },
  { id: 4, category: "Basic Operations & Math", title: "Program 4: Swap Two Variables", description: "Swaps the values of two variables using a temporary variable.", code: `a = input("Enter value for a: ")\nb = input("Enter value for b: ")\ntemp = a\na = b\nb = temp\nprint(f"Swapped: a={a}, b={b}")` },
  { id: 5, category: "Basic Operations & Math", title: "Program 5: Generate Random Number", description: "Generates and prints a random integer within a specified range.", code: `import random\nprint(f"Random number: {random.randint(1, 100)}")` },
  { id: 6, category: "Basic Operations & Math", title: "Program 6: Kilometers to Miles", description: "Converts a distance from kilometers to miles.", code: `kilometers = float(input("Enter kilometers: "))\nconversion_factor = 0.621371\nmiles = kilometers * conversion_factor\nprint(f"{kilometers} km = {miles} miles")` },
  { id: 7, category: "Basic Operations & Math", title: "Program 7: Celsius to Fahrenheit", description: "Converts temperature from Celsius to Fahrenheit.", code: `celsius = float(input("Enter Celsius: "))\nfahrenheit = (celsius * 9/5) + 32\nprint(f"{celsius}°C = {fahrenheit}°F")` },
  { id: 9, category: "Basic Operations & Math", title: "Program 9: Solve Quadratic Equation", description: "Solves quadratic equations ($ax^2 + bx + c = 0$) given coefficients.", code: `import math\na = float(input("Enter a: "))\nb = float(input("Enter b: "))\nc = float(input("Enter c: "))\ndiscriminant = b**2 - 4*a*c\nif discriminant > 0:\n    root1 = (-b + math.sqrt(discriminant)) / (2*a)\n    root2 = (-b - math.sqrt(discriminant)) / (2*a)\n    print(f"Root 1: {root1}, Root 2: {root2}")\nelif discriminant == 0:\n    root = -b / (2*a)\n    print(f"Root: {root}")\nelse:\n    real_part = -b / (2*a)\n    imaginary_part = math.sqrt(abs(discriminant)) / (2*a)\n    print(f"Root 1: {real_part} + {imaginary_part}i")\n    print(f"Root 2: {real_part} - {imaginary_part}i")` },
  { id: 10, category: "Basic Operations & Math", title: "Program 10: Swap Without Temp Variable", description: "Swaps two variables without using a temporary variable.", code: `a = 5\nb = 10\na, b = b, a\nprint(f"After swapping: a = {a}, b = {b}")` },
  { id: 29, category: "Basic Operations & Math", title: "Program 29: Body Mass Index (BMI)", description: "Calculates BMI based on height and weight, and provides a weight category.", code: `def bodymassindex(height, weight):\n    return round((weight / height**2),2)\nh = float(input("Enter your height in meters: "))\nw = float(input("Enter your weight in kg: "))\nbmi = bodymassindex(h, w)\nprint("Your BMI is: ", bmi)\nif bmi <= 18.5:\n    print("You are underweight.")\nelif 18.5 < bmi <= 24.9:\n    print("Your weight is normal.")\nelif 25 < bmi <= 29.29:\n    print("You are overweight.")\nelse:\n    print("You are obese.")` },
  { id: 30, category: "Basic Operations & Math", title: "Program 30: Natural Logarithm", description: "Calculates the natural logarithm of a given positive number.", code: `import math\nnum = float(input("Enter a number: "))\nif num <= 0:\n    print("Please enter a positive number.")\nelse:\n    result = math.log(num)\n    print(f"The natural logarithm of {num} is: {result}")` },
  { id: 31, category: "Basic Operations & Math", title: "Program 31: Cube Sum of First N Natural Numbers", description: "Computes the sum of cubes of the first N natural numbers.", code: `def cube_sum_of_natural_numbers(n):\n    if n <= 0:\n        return 0\n    else:\n        total = sum([i**3 for i in range(1, n + 1)])\n        return total\nn = int(input("Enter the value of n: "))\nresult = cube_sum_of_natural_numbers(n)\nprint(f"The cube sum of the first {n} natural numbers is: {result}")` },
  { id: 74, category: "Basic Operations & Math", title: "Program 74: Calculate Formula Q", description: "Calculates Q based on a given formula with fixed C and H values.", code: `import math\nC = 50\nH = 30\ndef calculate_Q(D):\n    return int(math.sqrt((2 * C * D) / H))\ninput_sequence = input("Enter comma-separated values of D: ")\nD_values = input_sequence.split(',')\nresult = [calculate_Q(int(D)) for D in D_values]\nprint(','.join(map(str, result)))` },
  { id: 93, category: "Basic Operations & Math", title: "Program 93: Radians to Degrees", description: "Converts an angle from radians to degrees, rounded to one decimal place.", code: `import math\ndef radians_to_degrees(radians):\n    degrees = radians * (180 / math.pi)\n    return round(degrees, 1)\nprint(radians_to_degrees(1))` },
  { id: 94, category: "Basic Operations & Math", title: "Program 94: Curzon Number Check", description: "Checks if a number is a Curzon number (if (2^n + 1) is divisible by (2n + 1)).", code: `def is_curzon(num):\n    numerator = 2 ** num + 1\n    denominator = 2 * num + 1\n    return numerator % denominator == 0\nprint(is_curzon(5))` },
  { id: 95, category: "Basic Operations & Math", title: "Program 95: Area of a Hexagon", description: "Calculates the area of a regular hexagon given its side length.", code: `import math\ndef area_of_hexagon(x):\n    area = (3 * math.sqrt(3) * x**2) / 2\n    return round(area, 1)\nprint(area_of_hexagon(1))` },
  { id: 114, category: "Basic Operations & Math", title: "Program 114: Cone Volume", description: "Calculates the volume of a cone rounded to the nearest hundredth.", code: `import math\ndef cone_volume(height, radius):\n    if radius == 0: return 0\n    volume = (1/3) * math.pi * (radius**2) * height\n    return round(volume, 2)\nprint(cone_volume(3, 2))` },

  // Control Flow & Logic
  { id: 8, category: "Control Flow & Logic", title: "Program 8: Display Calendar", description: "Displays the calendar for a given year and month.", code: `import calendar\nyear = int(input("Enter year: "))\nmonth = int(input("Enter month: "))\nprint(calendar.month(year, month))` },
  { id: 11, category: "Control Flow & Logic", title: "Program 11: Positive, Negative or Zero", description: "Checks if a number is positive, negative, or zero.", code: `num = float(input("Enter a number: "))\nif num > 0:\n    print("Positive number")\nelif num == 0:\n    print("Zero")\nelse:\n    print("Negative number")` },
  { id: 12, category: "Control Flow & Logic", title: "Program 12: Odd or Even Number", description: "Checks if a given number is odd or even.", code: `num = int(input("Enter a number: "))\nif num % 2 == 0:\n    print("This is an even number")\nelse:\n    print("This is an odd number")` },
  { id: 13, category: "Control Flow & Logic", title: "Program 13: Check Leap Year", description: "Determines if a given year is a leap year.", code: `year = int(input("Enter a year: "))\nif (year % 400 == 0) or (year % 4 == 0 and year % 100 != 0):\n    print(f"{year} is a leap year")\nelse:\n    print(f"{year} is not a leap year")` },
  { id: 14, category: "Control Flow & Logic", title: "Program 14: Check Prime Number", description: "Checks if a given number is a prime number.", code: `num = int(input("Enter a number: "))\nflag = False\nif num == 1:\n    print(f"{num} is not a prime number")\nelif num > 1:\n    for i in range(2, num):\n        if (num % i) == 0:\n            flag = True\n            break\n    if flag:\n        print(f"{num} is not a prime number")\n    else:\n        print(f"{num} is a prime number")` },
  { id: 15, category: "Control Flow & Logic", title: "Program 15: Print Primes in Interval", description: "Prints all prime numbers within a specified interval.", code: `lower = 1\nupper = 10\nprint(f"Prime numbers between {lower} and {upper} are:")\nfor num in range(lower, upper + 1):\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                break\n        else:\n            print(num)` },
  { id: 45, category: "Control Flow & Logic", title: "Program 45: Happy Number Check", description: "Determines if a number is a 'Happy Number' (reaches 1 when sum of squared digits is repeated).", code: `def is_happy_number(num):\n    seen = set()\n    while num != 1 and num not in seen:\n        seen.add(num)\n        num = sum(int(i) ** 2 for i in str(num))\n    return num == 1\nprint(is_happy_number(19))` },
  { id: 46, category: "Control Flow & Logic", title: "Program 46: All Happy Numbers (1-100)", description: "Lists all Happy Numbers between 1 and 100.", code: `def is_happy_number(num):\n    seen = set()\n    while num != 1 and num not in seen:\n        seen.add(num)\n        num = sum(int(i) ** 2 for i in str(num))\n    return num == 1\nhappy_numbers = [num for num in range(1, 101) if is_happy_number(num)]\nprint("Happy Numbers between 1 and 100:", happy_numbers)` },
  { id: 47, category: "Control Flow & Logic", title: "Program 47: Harshad Number Check", description: "Checks if a number is a Harshad (Niven) number (divisible by the sum of its digits).", code: `def is_harshad_number(num):\n    digit_sum = sum(int(i) for i in str(num))\n    return num % digit_sum == 0\nprint(is_harshad_number(18))` },
  { id: 48, category: "Control Flow & Logic", title: "Program 48: Pronic Numbers (1-100)", description: "Lists all pronic (oblong) numbers between 1 and 100.", code: `def is_pronic_number(num):\n    for n in range(1, int(num**0.5) + 1):\n        if n * (n + 1) == num:\n            return True
    return False\nprint("Pronic numbers between 1 and 100 are:")\nfor i in range(1, 101):\n    if is_pronic_number(i):\n        print(i, end=" | ")` },
  { id: 63, category: "Control Flow & Logic", title: "Program 63: Binary String Check", description: "Checks if a given string consists only of '0's and '1's.", code: `def is_binary_str(input_str):\n    for char in input_str:\n        if char not in '01':\n            return False\n    return True\nprint(is_binary_str("1001110"))` },
  { id: 98, category: "Control Flow & Logic", title: "Program 98: Correct Inequality Signs", description: "Evaluates if an inequality expression string is correct.", code: `def correct_signs(expression):\n    try:\n        return eval(expression)\n    except:\n        return False\nprint(correct_signs("3 < 7 < 11"))` },
  { id: 125, category: "Control Flow & Logic", title: "Program 125: Isogram Check", description: "Checks if a word is an isogram (no duplicate letters, case-insensitive).", code: `def is_isogram(word):\n    word = word.lower()\n    unique_letters = set()\n    for letter in word:\n        if letter in unique_letters:\n            return False\n        unique_letters.add(letter)\n    return True\nprint(is_isogram("Algorism"))` },
  { id: 126, category: "Control Flow & Logic", title: "Program 126: Characters in Order", description: "Checks if the characters in a string are in alphabetical order.", code: `def is_in_order(s):\n    return s == ''.join(sorted(s))\nprint(is_in_order("abc"))` },
  { id: 127, category: "Control Flow & Logic", title: "Program 127: Symmetrical Number", description: "Checks if a number is symmetrical (reads the same forwards and backwards).", code: `def is_symmetrical(num):\n    num_str = str(num)\n    return num_str == num_str[::-1]\nprint(is_symmetrical(7227))` },

  // Loops & Sequences (Fibonacci, Factorial, Armstrong)
  { id: 16, category: "Loops & Sequences", title: "Program 16: Find Factorial", description: "Calculates the factorial of a non-negative integer iteratively.", code: `num = int(input("Enter a number: "))\nfactorial = 1\nif num < 0:\n    print("Factorial does not exist for negative numbers")\nelif num == 0:\n    print("Factorial of 0 is 1")\nelse:\n    for i in range(1, num + 1):\n        factorial = factorial * i\n    print(f'The factorial of {num} is {factorial}')` },
  { id: 17, category: "Loops & Sequences", title: "Program 17: Multiplication Table", description: "Displays the multiplication table for a given number up to 10.", code: `num = int(input("Display multiplication table of: "))\nfor i in range(1, 11):\n    print(f"{num} x {i} = {num * i}")` },
  { id: 18, category: "Loops & Sequences", title: "Program 18: Print Fibonacci Sequence", description: "Generates and prints the Fibonacci sequence up to a given number of terms.", code: `nterms = int(input("How many terms? "))\nn1, n2 = 0, 1\ncount = 0\nif nterms <= 0:\n    print("Please enter a positive integer")\nelif nterms == 1:\n    print("Fibonacci sequence upto", nterms,":")\n    print(n1)\nelse:\n    print("Fibonacci sequence:")\n    while count < nterms:\n        print(n1)\n        nth = n1 + n2\n        n1 = n2\n        n2 = nth\n        count += 1` },
  { id: 19, category: "Loops & Sequences", title: "Program 19: Check Armstrong Number", description: "Checks if a number is an Armstrong number (sum of its digits raised to the power of the number of digits).", code: `num = int(input("Enter a number: "))\nnum_str = str(num)\nnum_digits = len(num_str)\nsum_of_powers = 0\ntemp_num = num\nwhile temp_num > 0:\n    digit = temp_num % 10\n    sum_of_powers += digit ** num_digits\n    temp_num //= 10\nif sum_of_powers == num:\n    print(f"{num} is an Armstrong number.")\nelse:\n    print(f"{num} is not an Armstrong number.")` },
  { id: 20, category: "Loops & Sequences", title: "Program 20: Armstrong Numbers in Interval", description: "Finds and prints all Armstrong numbers within a specified interval.", code: `lower = int(input("Enter lower limit: "))\nupper = int(input("Enter upper limit: "))\nfor num in range(lower, upper + 1):\n    order = len(str(num))\n    temp_num = num\n    sum_digits = 0\n    while temp_num > 0:\n        digit = temp_num % 10\n        sum_digits += digit ** order\n        temp_num //= 10\n    if num == sum_digits:\n        print(num)` },
  { id: 27, category: "Loops & Sequences", title: "Program 27: Fibonacci (Recursion)", description: "Generates Fibonacci sequence using a recursive function.", code: `def recur_fibo(n):\n    if n <= 1: return n\n    else: return(recur_fibo(n-1) + recur_fibo(n-2))\nnterms = int(input("Enter number of terms: "))\nif nterms <= 0: print("Enter positive integer")\nelse: print("Fibonacci sequence:")\nfor i in range(nterms): print(recur_fibo(i))` },
  { id: 28, category: "Loops & Sequences", title: "Program 28: Factorial (Recursion)", description: "Calculates the factorial of a number using recursion.", code: `def recur_factorial(n):\n    if n == 1: return n\n    else: return n * recur_factorial(n-1)\nnum = int(input("Enter the number: "))\nif num < 0: print("Factorial does not exist for negative numbers")\nelif num == 0: print("The factorial of 0 is 1")\nelse: print("The factorial of", num, "is", recur_factorial(num))` },
  { id: 89, category: "Loops & Sequences", title: "Program 89: Fibonacci (List Comp.)", description: "Generates Fibonacci sequence using list comprehension.", code: `def fibonacci(n):\n    sequence = [0, 1]\n    [sequence.append(sequence[-1] + sequence[-2]) for _ in range(2, n)]\n    return sequence\nn = int(input("Enter a value for n: "))\nprint(','.join(map(str, fibonacci(n))))` },
  { id: 100, category: "Loops & Sequences", title: "Program 100: Factorial (Recursion)", description: "Calculates the factorial of a number recursively.", code: `def factorial(n):\n    if n == 0: return 1\n    else: return n * factorial(n - 1)\nprint(factorial(5))` },
  { id: 115, category: "Loops & Sequences", title: "Program 115: Triangular Number Sequence", description: "Calculates the Nth triangular number.", code: `def triangle(n):\n    if n < 1: return 0\n    return n * (n + 1) // 2\nprint(triangle(6))` },

  // Data Structures (Lists, Arrays, Dictionaries)
  { id: 21, category: "Data Structures", title: "Program 21: Sum of Natural Numbers", description: "Finds the sum of natural numbers up to a given limit.", code: `limit = int(input("Enter the limit: "))\nsum_val = 0\nfor i in range(1, limit + 1):\n    sum_val += i\nprint("The sum of natural numbers up to", limit, "is:", sum_val)` },
  { id: 22, category: "Data Structures", title: "Program 22: Find LCM", description: "Computes the Least Common Multiple (LCM) of two numbers.", code: `def compute_lcm(x, y):\n    if x > y: greater = x\n    else: greater = y\n    while(True):\n        if((greater % x == 0) and (greater % y == 0)): lcm = greater; break\n        greater += 1\n    return lcm\nnum1 = int(input('Enter num1: '))\nnum2 = int(input('Enter num2: '))\nprint("The L.C.M. is", compute_lcm(num1, num2))` },
  { id: 23, category: "Data Structures", title: "Program 23: Find HCF", description: "Computes the Highest Common Factor (HCF) of two numbers.", code: `def compute_hcf(x, y):\n    if x > y: smaller = y\n    else: smaller = x\n    for i in range(1, smaller + 1):\n        if((x % i == 0) and (y % i == 0)): hcf = i\n    return hcf\nnum1 = int(input('Enter num1: '))\nnum2 = int(input('Enter num2: '))\nprint("The H.C.F. is", compute_hcf(num1, num2))` },
  { id: 32, category: "Data Structures", title: "Program 32: Sum of Array", description: "Calculates the sum of all elements in a list (array).", code: `arr = [1, 2, 3]\nans = sum(arr)\nprint('Sum of the array is ', ans)` },
  { id: 33, category: "Data Structures", title: "Program 33: Largest Element in Array", description: "Finds the largest element in a list.", code: `def find_largest_element(arr):\n    if not arr: return "Array is empty"\n    largest_element = arr[0]\n    for element in arr: if element > largest_element: largest_element = element\n    return largest_element\nmy_array = [10, 20, 30, 99]\nprint(f"The largest element in the array is: {find_largest_element(my_array)}")` },
  { id: 34, category: "Data Structures", title: "Program 34: Array Rotation", description: "Rotates an array by a given number of positions.", code: `def rotate_array(arr, d):\n    n = len(arr)\n    if d < 0 or d >= n: return "Invalid rotation value"\n    rotated_arr = [0] * n\n    for i in range(n): rotated_arr[i] = arr[(i + d) % n]\n    return rotated_arr\narr = [1, 2, 3, 4, 5]\nd = 2\nprint("Original Array:", arr)\nprint("Rotated Array:", rotate_array(arr, d))` },
  { id: 35, category: "Data Structures", title: "Program 35: Split & Add Array", description: "Splits an array and adds the first part to the end.", code: `def split_and_add(arr, k):\n    if k <= 0 or k >= len(arr): return arr\n    first_part = arr[:k]\n    second_part = arr[k:]\n    result = second_part + first_part\n    return result\narr = [1, 2, 3, 4, 5]\nk = 3\nprint("Original Array:", arr)\nprint("Array after splitting and adding:", split_and_add(arr, k))` },
  { id: 36, category: "Data Structures", title: "Program 36: Monotonic Array Check", description: "Checks if an array is monotonic (non-increasing or non-decreasing).", code: `def is_monotonic(arr):\n    increasing = decreasing = True\n    for i in range(1, len(arr)): \n        if arr[i] > arr[i - 1]: decreasing = False\n        elif arr[i] < arr[i - 1]: increasing = False\n    return increasing or decreasing\nprint("arr1 is monotonic:", is_monotonic([1, 2, 2, 3]))` },
  { id: 37, category: "Data Structures", title: "Program 37: Add Two Matrices", description: "Adds two matrices of the same dimensions.", code: `def add_matrices(mat1, mat2):\n    if len(mat1) != len(mat2) or len(mat1[0]) != len(mat2[0]):\n        return "Matrices must have same dimensions"\n    result = []\n    for i in range(len(mat1)): \n        row = []\n        for j in range(len(mat1[0])): row.append(mat1[i][j] + mat2[i][j])\n        result.append(row)\n    return result\nmatrix1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nmatrix2 = [[9, 8, 7], [6, 5, 4], [3, 2, 1]]\nprint("Sum of matrices:")\nfor row in add_matrices(matrix1, matrix2): print(row)` },
  { id: 38, category: "Data Structures", title: "Program 38: Multiply Two Matrices", description: "Multiplies two matrices.", code: `def multiply_matrices(mat1, mat2):\n    rows1, cols1 = len(mat1), len(mat1[0])\n    rows2, cols2 = len(mat2), len(mat2[0])\n    if cols1 != rows2: return "Matrix multiplication not possible"\n    result = [[0 for _ in range(cols2)] for _ in range(rows1)]\n    for i in range(rows1):\n        for j in range(cols2):\n            for k in range(cols1): result[i][j] += mat1[i][k] * mat2[k][j]\n    return result\nmatrix1 = [[1, 2, 3], [4, 5, 6]]\nmatrix2 = [[7, 8], [9, 10], [11, 12]]\nprint("Result of matrix multiplication:")\nfor row in multiply_matrices(matrix1, matrix2): print(row)` },
  { id: 39, category: "Data Structures", title: "Program 39: Transpose a Matrix", description: "Transposes a given matrix.", code: `def transpose_matrix(matrix):\n    rows, cols = len(matrix), len(matrix[0])\n    result = [[0 for _ in range(rows)] for _ in range(cols)]\n    for i in range(rows): \n        for j in range(cols): result[j][i] = matrix[i][j]\n    return result\nmatrix = [[1, 2, 3], [4, 5, 6]]\nfor row in transpose_matrix(matrix): print(row)` },
  { id: 50, category: "Data Structures", title: "Program 50: Multiply All List Numbers", description: "Calculates the product of all numbers in a list.", code: `numbers = [10, 20, 30, 40, 50]\nproduct_of_numbers = 1\nfor i in numbers: product_of_numbers *= i\nprint("Product of elements in the list:", product_of_numbers)` },
  { id: 51, category: "Data Structures", title: "Program 51: Smallest Number in List", description: "Finds the smallest number in a list.", code: `numbers = [30, 10, -45, 5, 20]\nminimum = numbers[0]\nfor i in numbers: if i < minimum: minimum = i\nprint("The smallest number in the list is:", minimum)` },
  { id: 52, category: "Data Structures", title: "Program 52: Largest Number in List", description: "Finds the largest number in a list.", code: `numbers = [30, 10, -45, 5, 20]\nmaximum = numbers[0]\nfor i in numbers: if i > maximum: maximum = i\nprint("The largest number in the list is:", maximum)` },
  { id: 53, category: "Data Structures", title: "Program 53: Second Largest in List", description: "Finds the second largest number in a list.", code: `numbers = [30, 10, 45, 5, 20]\nnumbers.sort(reverse=True)\nif len(numbers) >= 2: print("Second largest:", numbers[1])\nelse: print("List too short for second largest.")` },
  { id: 54, category: "Data Structures", title: "Program 54: N Largest Elements", description: "Finds the N largest elements from a list.", code: `def find_n_largest_elements(lst, n):\n    sorted_lst = sorted(lst, reverse=True)\n    return sorted_lst[:n]\nnumbers = [30, 10, 45, 5, 20, 50, 345, 100]\nN = 3\nprint(f"The {N} largest elements are:", find_n_largest_elements(numbers, N))` },
  { id: 55, category: "Data Structures", title: "Program 55: Even Numbers in List", description: "Prints all even numbers present in a list.", code: `numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\neven_numbers = [num for num in numbers if num % 2 == 0]\nprint("Even numbers in the list:", even_numbers)` },
  { id: 56, category: "Data Structures", title: "Program 56: Odd Numbers in List", description: "Prints all odd numbers present in a list.", code: `numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nodd_numbers = [num for num in numbers if num % 2 != 0]\nprint("Odd numbers in the list:", odd_numbers)` },
  { id: 57, category: "Data Structures", title: "Program 57: Remove Empty Lists", description: "Removes all empty sublists from a list of lists.", code: `list_of_lists = [[1, 2, 3], [], [4, 5], [], [6, 7, 8], []]\nfiltered_list = [i for i in list_of_lists if i]\nprint("List after removing empty lists:", filtered_list)` },
  { id: 58, category: "Data Structures", title: "Program 58: Cloning a List", description: "Demonstrates various ways to clone or copy a list.", code: `# 1. Using Slice Operator\noriginal_list = [1, 2, 3, 4, 5]\ncloned_list = original_list[:]\nprint(cloned_list)\n\n# 2. Using list() constructor\ncloned_list = list(original_list)\nprint(cloned_list)\n\n# 3. Using List Comprehension\ncloned_list = [item for item in original_list]\nprint(cloned_list)` },
  { id: 59, category: "Data Structures", title: "Program 59: Count Element Occurrences", description: "Counts the occurrences of a specific element in a list.", code: `def count_occurrences(lst, element):\n    return lst.count(element)\nmy_list = [1, 2, 3, 4, 2, 5, 2, 3, 4, 6, 5]\nelement_to_count = 2\nprint(f"The element {element_to_count} appears {count_occurrences(my_list, element_to_count)} times.")` },
  { id: 67, category: "Data Structures", title: "Program 67: Extract Unique Dict Values", description: "Extracts and prints all unique values from a dictionary.", code: `my_dict = {'a': 10, 'b': 20, 'c': 10, 'd': 30, 'e': 20}\nuni_val = set()\nfor i in my_dict.values(): uni_val.add(i)\nunique_values_list = list(uni_val)\nprint("Unique values in the dictionary:", unique_values_list)` },
  { id: 68, category: "Data Structures", title: "Program 68: Sum of All Dict Items", description: "Calculates the sum of all numerical values in a dictionary.", code: `my_dict = {'a': 10, 'b': 20, 'c': 30, 'd': 40, 'e': 50}\ntotal_sum = 0\nfor i in my_dict.values(): total_sum += i\nprint("Sum of all items in the dictionary:", total_sum)` },
  { id: 69, category: "Data Structures", title: "Program 69: Merging Two Dictionaries", description: "Demonstrates different methods to merge two dictionaries.", code: `# 1. Using update() method:\ndict1 = {'a': 1, 'b': 2}\ndict2 = {'c': 3, 'd': 4}\ndict1.update(dict2)\nprint("Merged Dictionary (update()):", dict1)\n\n# 2. Using dictionary unpacking\ndict1 = {'a': 1, 'b': 2}\ndict2 = {'c': 3, 'd': 4}\nmerged_dict = {**dict1, **dict2}\nprint("Merged Dictionary (unpacking):", merged_dict)` },
  { id: 70, category: "Data Structures", title: "Program 70: Key-Values List to Flat Dict", description: "Converts a list of key-value tuples into a flat dictionary.", code: `key_values_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4)]\nflat_dict = {}\nfor key, value in key_values_list: flat_dict[key] = value\nprint("Flat Dictionary:", flat_dict)` },
  { id: 71, category: "Data Structures", title: "Program 71: OrderedDict Insertion", description: "Demonstrates insertion at the beginning of an OrderedDict.", code: `from collections import OrderedDict\nordered_dict = OrderedDict([('b', 2), ('c', 3), ('d', 4)])\nnew_item = ('a', 1)\nnew_ordered_dict = OrderedDict([new_item])\nnew_ordered_dict.update(ordered_dict)\nprint("Updated OrderedDict:", new_ordered_dict)` },
  { id: 72, category: "Data Structures", title: "Program 72: Check Char Order in String (OrderedDict)", description: "Checks if characters in a string match the order of a reference string using OrderedDict.", code: `from collections import OrderedDict\ndef check_order(string, reference):\n    string_dict = OrderedDict.fromkeys(string)\n    reference_dict = OrderedDict.fromkeys(reference)\n    return string_dict == reference_dict\ninput_string = "hello world"\nreference_string = "helo wrd"\nprint("Order matches:", check_order(input_string, reference_string))` },
  { id: 73, category: "Data Structures", title: "Program 73: Sort Dictionaries by Key/Value", description: "Sorts Python dictionaries by keys or values.", code: `# Sort by Keys:\nsample_dict = {'apple': 3, 'banana': 1, 'cherry': 2, 'date': 4}\nsorted_dict_by_keys = dict(sorted(sample_dict.items()))\nprint("Sorted by keys:")\nfor key, value in sorted_dict_by_keys.items(): print(f"{key}: {value}")\n\n# Sort by values:\nsorted_dict_by_values = dict(sorted(sample_dict.items(), key=lambda item: item[1]))\nprint("Sorted by values:")\nfor key, value in sorted_dict_by_values.items(): print(f"{key}: {value}")` },
  { id: 75, category: "Data Structures", title: "Program 75: Generate 2D Array", description: "Generates a 2-dimensional array where element value is i*j.", code: `X, Y = map(int, input("Enter two digits (X, Y): ").split(','))\narray = [[0 for j in range(Y)] for i in range(X)]\nfor i in range(X): for j in range(Y): array[i][j] = i * j\nfor row in array: print(row)` },
  { id: 104, category: "Data Structures", title: "Program 104: Destructuring Assignment", description: "Demonstrates Python's destructuring assignment for lists.", code: `writeyourcodehere = [1, 2, 3, 4, 5, 6]\nfirst, *middle, last = writeyourcodehere\nprint(f"first: {first}")\nprint(f"middle: {middle}")\nprint(f"last: {last}")` },
  { id: 106, category: "Data Structures", title: "Program 106: Move Elements to End", description: "Moves all occurrences of a specified element to the end of a list.", code: `def move_to_end(lst, element):\n    count = lst.count(element)\n    lst = [x for x in lst if x != element]\n    lst.extend([element] * count)\n    return lst\nprint(move_to_end([1, 3, 2, 4, 4, 1], 1))` },
  { id: 111, category: "Data Structures", title: "Program 111: Find Even Numbers (List Comp.)", description: "Finds all even numbers up to a given number using list comprehension.", code: `def find_even_nums(num):\n    return [x for x in range(1, num + 1) if x % 2 == 0]\nprint(find_even_nums(8))` },
  { id: 112, category: "Data Structures", title: "Program 112: Filter List (Integers Only)", description: "Filters a list to return only its integer elements.", code: `def filter_list(lst):\n    return [x for x in lst if isinstance(x, int)]\nprint(filter_list([1, 2, 3, "a", "b", 4]))` },
  { id: 113, category: "Data Structures", title: "Program 113: Add Indexes to Elements", description: "Adds each element's index to its value in a list.", code: `def add_indexes(lst):\n    return [i + val for i, val in enumerate(lst)]\nprint(add_indexes([0, 0, 0, 0, 0]))` },
  { id: 116, category: "Data Structures", title: "Program 116: Missing Number in List", description: "Finds the missing number in a list of numbers from 1 to 10.", code: `def missing_num(lst):\n    total_sum = sum(range(1, 11))\n    given_sum = sum(lst)\n    return total_sum - given_sum\nprint(missing_num([1, 2, 3, 4, 6, 7, 8, 9, 10]))` },
  { id: 117, category: "Data Structures", title: "Program 117: Next in Line List Op", description: "Adds a number to the end of a list and removes the first element.", code: `def next_in_line(lst, num):\n    if lst: lst.pop(0); lst.append(num); return lst\n    else: return "No list has been selected"\nprint(next_in_line([5, 6, 7, 8, 9], 1))` },
  { id: 118, category: "Data Structures", title: "Program 118: Sum of Budgets", description: "Calculates the sum of budgets from a list of dictionaries.", code: `def get_budgets(lst):\n    total_budget = sum(person['budget'] for person in lst)\n    return total_budget\nbudgets = [{'name': 'John', 'age': 21, 'budget': 23000}]\nprint(get_budgets(budgets))` },
  { id: 121, category: "Data Structures", title: "Program 121: Return Only Integers", description: "Filters a list to return only integer values, excluding booleans and floats.", code: `def return_only_integer(lst):\n    return [x for x in lst if isinstance(x, int) and not isinstance(x, bool)]\nprint(return_only_integer([9, 2, "space", "car", "lion", 16]))` },
  { id: 122, category: "Data Structures", title: "Program 122: Divisible Numbers in Range", description: "Returns a list of numbers divisible by 'n' within a given range.", code: `def list_operation(x, y, n):\n    return [num for num in range(x, y + 1) if num % n == 0]\nprint(list_operation(1, 10, 3))` },
  { id: 123, category: "Data Structures", title: "Program 123: Simon Says List Shift", description: "Checks if the second list is the first list shifted right by one element.", code: `def simon_says(list1, list2):\n    return list1[:-1] == list2[1:]\nprint(simon_says([1, 2, 3, 4, 5], [0, 1, 2, 3, 4]))` },
  { id: 124, category: "Data Structures", title: "Program 124: Secret Society Name", description: "Creates a secret society name from the first letters of names, sorted alphabetically.", code: `def society_name(names):\n    secret_name = ''.join(sorted([name[0] for name in names]))\n    return secret_name\nprint(society_name(["Adam", "Sarah", "Malcolm"]))` },
  { id: 130, category: "Data Structures", title: "Program 130: Sort & Remove Duplicates", description: "Sorts a list and removes all duplicate items.", code: `def setify(lst):\n    unique_set = set(sorted(lst))\n    return list(unique_set)\nprint(setify([1, 3, 3, 5, 5]))` },
  { id: 133, category: "Data Structures", title: "Program 133: Unique Number in List", description: "Finds the single unique number in a list where all others are duplicates.", code: `def unique(numbers):\n    count_dict = {}\n    for num in numbers: count_dict[num] = count_dict.get(num, 0) + 1\n    for num, count in count_dict.items():\n        if count == 1: return num\nprint(unique([3, 3, 3, 7, 3, 3]))` },
  { id: 135, category: "Data Structures", title: "Program 135: Sort List by Length", description: "Sorts a list of strings from shortest to longest.", code: `def sort_by_length(lst):\n    return sorted(lst, key=len)\nprint(sort_by_length(["Google", "Apple", "Microsoft"]))` },
  { id: 137, category: "Data Structures", title: "Program 137: Equal Value Integers", description: "Returns the count of integers with equal values among three arguments (0, 2, or 3).", code: `def equal(a, b, c):\n    if a == b == c: return 3\n    elif a == b or b == c or a == c: return 2\n    else: return 0\nprint(equal(3, 4, 3))` },
  { id: 138, category: "Data Structures", title: "Program 138: Dict to Key-Values Tuples", description: "Converts a dictionary into a list of (key, value) tuples, sorted alphabetically by key.", code: `def dict_to_list(input_dict):\n    return sorted(input_dict.items())\nprint(dict_to_list({"D": 1, "B": 2, "C": 3}))` },
  { id: 139, category: "Data Structures", title: "Program 139: Mapping Lowercase to Uppercase", description: "Creates a dictionary mapping lowercase letters to their uppercase versions.", code: `def mapping(letters):\n    result = {}\n    for letter in letters: result[letter] = letter.upper()\n    return result\nprint(mapping(["p", "s"]))` },


  // String Manipulation
  { id: 40, category: "String Manipulation", title: "Program 40: Sort Words in Alphabetic Order", description: "Sorts words in a string alphabetically and prints them.", code: `my_str = input("Enter a string: ")\nwords = [word.capitalize() for word in my_str.split()]\nwords.sort()\nprint("The sorted words are:")\nfor word in words: print(word)` },
  { id: 41, category: "String Manipulation", title: "Program 41: Remove Punctuation", description: "Removes punctuation marks from a given string.", code: `punctuations = '''!()-[]{};:'"\\,<>./?@#$%^&*_~'''\nmy_str = input("Enter a string: ")\nno_punct = ""\nfor char in my_str: if char not in punctuations: no_punct = no_punct + char\nprint(no_punct)` },
  { id: 60, category: "String Manipulation", title: "Program 60: Words Greater Than Length K", description: "Finds words in a list that are longer than a specified length `k`.", code: `def find_words(words, k):\n    result = []\n    for i in words: if len(i) > k: result.append(i)\n    return result\nword_list = ["apple", "banana", "cherry"]\nk = 5\nprint(f"Words longer than {k} characters: {find_words(word_list, k)}")` },
  { id: 61, category: "String Manipulation", title: "Program 61: Remove i-th Character", description: "Removes the character at a specific index from a string.", code: `def remove_char(input_str, i):\n    if i < 0 or i >= len(input_str): return input_str\n    return input_str[:i] + input_str[i + 1:]\ninput_str = "Hello, World!"\ni = 7\nprint(f"String after removing {i}th char: {remove_char(input_str, i)}")` },
  { id: 62, category: "String Manipulation", title: "Program 62: Split and Join a String", description: "Demonstrates splitting a string into words and joining them back.", code: `input_str = "Python program to split and join a string"\nword_list = input_str.split()\nseparator = " "\noutput_str = separator.join(word_list)\nprint("Original String:", input_str)\nprint("List of split Words:", word_list)\nprint("Joined String:", output_str)` },
  { id: 64, category: "String Manipulation", title: "Program 64: Uncommon Words from Two Strings", description: "Finds words that are present in one of two strings but not in both.", code: `def uncommon_words(str1, str2):\n    words1 = set(str1.split())\n    words2 = set(str2.split())\n    uncommon_words_set = words1.symmetric_difference(words2)\n    return list(uncommon_words_set)\nstring1 = "This is the first string"\nstring2 = "This is the second string"\nprint("Uncommon words:", uncommon_words(string1, string2))` },
  { id: 65, category: "String Manipulation", title: "Program 65: Duplicate Characters in String", description: "Finds all characters that appear more than once in a string.", code: `def find_duplicates(input_str):\n    char_count = {}\n    duplicates = []\n    for char in input_str: char_count[char] = char_count.get(char, 0) + 1\n    for char, count in char_count.items():\n        if count > 1: duplicates.append(char)\n    return duplicates\nprint("Duplicate characters:", find_duplicates("piyush sharma"))` },
  { id: 66, category: "String Manipulation", title: "Program 66: Check String for Special Char", description: "Checks if a string contains any special characters.", code: `import re\ndef check_special_char(in_str):\n    pattern = r'[!@#$%^&*()_+{}\\[\\]:;<>,.?~\\/"\\-=]'\n    return bool(re.search(pattern, in_str))\nprint("Contains special chars:", check_special_char("Hello, World!"))` },
  { id: 76, category: "String Manipulation", title: "Program 76: Sort Comma-Separated Words", description: "Accepts comma-separated words and prints them sorted alphabetically.", code: `input_sequence = input("Enter words: ")\nwords = input_sequence.split(',')\nsorted_words = sorted(words)\nprint("Sorted words:", ','.join(sorted_words))` },
  { id: 77, category: "String Manipulation", title: "Program 77: Remove Duplicates & Sort Words", description: "Removes duplicate words and sorts them alphanumerically from a whitespace-separated sequence.", code: `input_sequence = input("Enter words: ")\nwords = set(input_sequence.split())\nsorted_words = sorted(words)\nprint("Result:", ' '.join(sorted_words))` },
  { id: 79, category: "String Manipulation", title: "Program 79: Count Letters and Digits", description: "Counts the number of letters and digits in a given sentence.", code: `sentence = input("Enter a sentence: ")\nletter_count = 0\ndigit_count = 0\nfor char in sentence:\n    if char.isalpha(): letter_count += 1\n    elif char.isdigit(): digit_count += 1\nprint("LETTERS", letter_count)\nprint("DIGITS", digit_count)` },
  { id: 92, category: "String Manipulation", title: "Program 92: Stutter a Word", description: "Creates a 'stutter' effect by repeating the first two letters of a word.", code: `def stutter(word):\n    if len(word) < 2: return "Word must be at least two characters long."\n    return f"{word[:2]}... {word[:2]}... {word}?"\nprint(stutter("incredible"))` },
  { id: 99, category: "String Manipulation", title: "Program 99: Replace Vowels with Character", description: "Replaces all vowels in a string with a specified character.", code: `def replace_vowels(string, char):\n    vowels = "AEIOUaeiou"\n    for vowel in vowels: string = string.replace(vowel, char)\n    return string\nprint(replace_vowels("the aardvark", "#"))` },
  { id: 103, category: "String Manipulation", title: "Program 103: Reverser (Case Swap)", description: "Reverses a string and swaps the case of its characters.", code: `def reverse(input_str):\n    return input_str[::-1].swapcase()\nprint(reverse("Hello World"))` },
  { id: 110, category: "String Manipulation", title: "Program 110: Indices of Capital Letters", description: "Returns an ordered list containing the indices of all capital letters in a string.", code: `def index_of_caps(word):\n    return [i for i, char in enumerate(word) if char.isupper()]\nprint(index_of_caps("eDaBiT"))` },
  { id: 119, category: "String Manipulation", title: "Program 119: Alphabet Soup (Sort String)", description: "Returns a string with its letters sorted in alphabetical order.", code: `def alphabet_soup(txt):\n    return ''.join(sorted(txt))\nprint(alphabet_soup("hello"))` },
  { id: 140, category: "String Manipulation", title: "Program 140: Replace All Vowels", description: "Replaces all vowels in a string with a specified vowel.", code: `def vow_replace(string, vowel):\n    vowels = "aeiou"\n    result = ""\n    for char in string:\n        if char in vowels: result += vowel\n        else: result += char\n    return result\nprint(vow_replace("apples and bananas", "u"))` },
  { id: 141, category: "String Manipulation", title: "Program 141: ASCII Capitalize", description: "Capitalizes a letter if its ASCII code is even, lowercase if odd.", code: `def ascii_capitalize(input_str):\n    result = ""\n    for char in input_str:\n        if ord(char) % 2 == 0: result += char.upper()\n        else: result += char.lower()\n    return result\nprint(ascii_capitalize("to be or not to be!"))` },

  // Object-Oriented Programming (OOP)
  { id: 83, category: "OOP Concepts", title: "Program 83: Person Class & Subclasses", description: "Defines a base `Person` class and `Male`, `Female` subclasses with a `getGender` method.", code: `class Person:\n    def getGender(self): return "Unknown"\nclass Male(Person):\n    def getGender(self): return "Male"\nclass Female(Person):\n    def getGender(self): return "Female"\nperson = Person()\nmale = Male()\nfemale = Female()\nprint(person.getGender())\nprint(male.getGender())\nprint(female.getGender())` },
  { id: 91, category: "OOP Concepts", title: "Program 91: Shape & Square Classes", description: "Defines a `Shape` class with default area 0 and a `Square` subclass that calculates its area.", code: `class Shape:\n    def __init__(self): pass\n    def area(self): return 0\nclass Square(Shape):\n    def __init__(self, length): super().__init__(); self.length = length\n    def area(self): return self.length ** 2\nsquare = Square(5)\nprint("Area of the square:", square.area())` },
  { id: 134, category: "OOP Concepts", title: "Program 134: Circle Constructor", description: "Creates a `Circle` class with `getArea()` and `getPerimeter()` methods.", code: `import math\nclass Circle:\n    def __init__(self, radius): self.radius = radius\n    def getArea(self): return round(math.pi * self.radius**2)\n    def getPerimeter(self): return round(2 * math.pi * self.radius)\ncircy = Circle(11)\nprint("Area:", circy.getArea())\nprint("Perimeter:", circy.getPerimeter())` },

  // Advanced Concepts / Generators
  { id: 81, category: "Advanced Concepts & Generators", title: "Program 81: Divisible by 7 Generator", description: "A class with a generator to iterate numbers divisible by 7 within a range.", code: `class DivisibleBySeven:\n    def __init__(self, n): self.n = n\n    def generate_divisible_by_seven(self):\n        for num in range(self.n + 1): \n            if num % 7 == 0: yield num\nn = 50\ngen = DivisibleBySeven(n).generate_divisible_by_seven()\nprint(','.join(map(str, gen)))` },
  { id: 85, category: "Advanced Concepts & Generators", title: "Program 85: Compress/Decompress String", description: "Compresses and decompresses a string using the `zlib` module.", code: `import zlib\nstring = "hello world!hello world!hello world!hello world!"\ncompressed_string = zlib.compress(string.encode())\ndecompressed_string = zlib.decompress(compressed_string).decode()\nprint("Original String:", string)\nprint("Compressed String:", compressed_string)\nprint("Decompressed String:", decompressed_string)` },
  { id: 86, category: "Advanced Concepts & Generators", title: "Program 86: Binary Search Function", description: "Implements a binary search function for a sorted list.", code: `def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target: return mid\n        elif arr[mid] < target: left = mid + 1\n        else: right = mid - 1\n    return -1\nsorted_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\ntarget_element = 4\nprint(f"Element {target_element} found at index {binary_search(sorted_list, target_element)}")` },
  { id: 87, category: "Advanced Concepts & Generators", title: "Program 87: Divisible by 5 & 7 Generator", description: "A generator to yield numbers divisible by both 5 and 7 within a range.", code: `def divisible_by_5_and_7(n):\n    for num in range(n + 1): \n        if num % 5 == 0 and num % 7 == 0: yield num\nn = 100\nprint(','.join(map(str, divisible_by_5_and_7(n))))` },
  { id: 88, category: "Advanced Concepts & Generators", title: "Program 88: Even Numbers Generator", description: "A generator to yield even numbers within a given range.", code: `def even_numbers(n):\n    for num in range(n + 1): \n        if num % 2 == 0: yield num\nn = 10\nprint(','.join(map(str, even_numbers(n))))` },
  { id: 96, category: "Advanced Concepts & Generators", title: "Program 96: Decimal to Binary", description: "Converts a base-10 (decimal) number string to its base-2 (binary) representation.", code: `def binary(decimal):\n    binary_str = ""\n    while decimal > 0:\n        remainder = decimal % 2\n        binary_str = str(remainder) + binary_str\n        decimal = decimal // 2\n    return binary_str if binary_str else "0"\nprint(binary(10))` },
  { id: 109, category: "Advanced Concepts & Generators", title: "Program 109: Paper Folding Thickness", description: "Calculates the thickness of a paper after 'n' folds, starting at 0.5mm.", code: `def num_layers(n):\n    initial_thickness_mm = 0.5\n    final_thickness_mm = initial_thickness_mm * (2 ** n)\n    final_thickness_m = final_thickness_mm / 1000\n    return f"{final_thickness_m:.3f}m"\nprint(num_layers(4))` },
  { id: 120, category: "Advanced Concepts & Generators", title: "Program 120: Compound Interest", description: "Calculates the future value of an investment with compound interest.", code: `def compound_interest(p, t, r, n):\n    a = p * (1 + (r / n)) ** (n * t)\n    return round(a, 2)\nprint(compound_interest(10000, 10, 0.06, 12))` },
  { id: 131, category: "Advanced Concepts & Generators", title: "Program 131: Mean of All Digits", description: "Calculates the mean (average) of all digits in an integer.", code: `def mean(n):\n    n_str = str(n)\n    digit_sum = sum(int(digit) for digit in n_str)\n    digit_count = len(n_str)\n    return int(digit_sum / digit_count)\nprint(mean(12345))` },
  { id: 132, category: "Advanced Concepts & Generators", title: "Program 132: Amplify by 10 (Divisible by 4)", description: "Creates a list from 1 to N, amplifying numbers divisible by 4 by 10.", code: `def amplify(num):\n    return [n * 10 if n % 4 == 0 else n for n in range(1, num + 1)]\nprint(amplify(4))` },
  { id: 136, category: "Advanced Concepts & Generators", title: "Program 136: Pythagorean Triplet", description: "Checks if three given integers form a Pythagorean triplet.", code: `def is_triplet(a, b, c):\n    sorted_numbers = sorted([a, b, c])\n    return sorted_numbers[0] ** 2 + sorted_numbers[1] ** 2 == sorted_numbers[2] ** 2\nprint(is_triplet(3, 4, 5))` },
];
